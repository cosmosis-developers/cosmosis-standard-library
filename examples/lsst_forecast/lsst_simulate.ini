[runtime]
sampler = test


[test]
fatal_errors = T
save_dir = lsst1

[pipeline]
quiet=F
timing=T
debug=F
modules = consistency camb  #extrapolate 
            fast_pt load_nz  
            #smail_nz_source smail_nz_lens
            unbiased_galaxies nonlinear_linear_alignment   pk_to_cl bias  add_intrinsic save_simulation 
values = examples/lsst_forecast/lsst_values.ini
likelihoods = 
 

#This section saves the output 
[save_simulation]
file = likelihood/2pt/save_2pt.py
shear_nz_name = source
position_nz_name = lens
filename = examples/lsst_forecast/lsst_simulation.fits
overwrite = T
; This will make a Gaussian-only covariance
make_covariance = T
;These values define the survey and the observations being made
;First, some details of the survey itself:
fsky = 0.436
number_density_shear_arcmin2 =  10. 10. 10. 10. 10. #5.5 5.5 5.5 5.5 5.5 #5.5 5.5 5.5 5.5 5.5
number_density_lss_arcmin2 = 18. 18. 18. 18. 18. #5.5 5.5 5.5 5.5 5.5 #5.5 5.5 5.5 5.5 5.5
sigma_e_total = 0.26  0.26  0.26  0.26  0.26  #0.3  0.3  0.3  0.3  0.3
;Then the observations we will generate:
ell_min = 20
ell_max = 5000
n_ell = 20 #50
; sections to save - C_ell values from these three
spectrum_sections = shear_cl galaxy_shear_cl galaxy_cl


[unbiased_galaxies]
file = bias/no_bias/no_bias.py

[load_nz]
file = number_density/load_nz_sacc/load_nz_sacc.py
nz_file = examples/lsst_forecast/forecast_fid.sacc
data_sets = lens src
prefix_section = T
prefix_extension = T

#The remainder of the pipeline is identical to the one used in the lsst_analyze.ini
#file adjacent to this one.
#We could put this text in a file lsst_common.ini and use the command:
#%include lsst_common.ini but I didn't want to people.

[nonlinear_linear_alignment]
#file = intrinsic_alignments/la_model/linear_alignments_interface.py
#method = bk_corrected
#do_galaxy_intrinsic = T
file = intrinsic_alignments/tatt/tatt_interface.py
sub_lowk = F
do_galaxy_intrinsic = F
ia_model = tatt

[add_intrinsic]
file=shear/add_intrinsic/add_intrinsic.py
shear-shear=T
position-shear=T


[consistency]
file = utility/consistency/consistency_interface.py

[camb]
file = boltzmann/camb/camb_interface.py
mode=all
lmax=5000 #2500
feedback=0
zmin_background = 0.
zmax_background = 4.
nz_background = 256
kmin=1e-4
kmax = 50.0
kmax_extrapolate = 50.0

[extrapolate]
file = boltzmann/extrapolate/extrapolate_power.py 
kmax = 500.

[sigma8_rescale]
file = utility/sample_sigma8/sigma8_rescale.py


[bias]
file = bias/binwise_bias/bin_bias.py


; This module uses the Limber approximation to compute shear-shear C_ell
; given the shear kernel (which is derived from the number density and 
; from geometry)

[pk_to_cl]
file = structure/projection/project_2d.py
ell_min_logspaced = 20.
ell_max_logspaced = 5000. #2627.21847662
n_ell_logspaced = 20 #50
shear-shear = source-source
position-shear = lens-source
position-position=lens-lens
shear-intrinsic = source-source
intrinsic-intrinsic = source-source
position-intrinsic = lens-source
verbose = T
sig_over_dchi = 20. 
shear_kernel_dchi = 10. 



[smail_nz_source]
file = number_density/smail/photometric_smail.py
zmax = 3. #4.0
dz = 0.01
nbin = 3 #5
input_section = number_density_source_params
output_section = nz_source

[smail_nz_lens]
file = number_density/smail/photometric_smail.py
zmax = 3.0
dz = 0.01
; for Y1 use nbin=5
nbin = 3 #5 #10
input_section = number_density_lens_params
output_section = nz_lens

[fast_pt]
file = structure/fast_pt/fast_pt_interface.py
do_ia = T
k_res_fac = 0.5
verbose = F