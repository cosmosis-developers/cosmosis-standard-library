[ccl_comprehensive]
file = cosmosis-standard-library/structure/ccl/draft/cl_with_ccl.py

; ===== ADVANCED CCL CONFIGURATION =====
; This example demonstrates the advanced features you requested:
; - BaccoemuNonlinear emulator for matter power spectrum
; - BaccoLbiasCalculator for perturbative bias
; - Magnification bias support
; - sigma8_cb normalization

; ===== GENERAL COMPUTATION CONTROL =====
compute_background = T
compute_power_spectra = T
compute_growth = T
compute_halo_model = F

; ===== ANGULAR POWER SPECTRA =====
compute_gc = T                    ; Galaxy clustering
compute_shear = T                 ; Weak lensing shear
compute_cross = T                 ; Galaxy-shear cross-correlation
compute_cmb_lensing = F          ; CMB lensing
compute_isw = F                  ; Integrated Sachs-Wolfe

; ===== MAGNIFICATION BIAS =====
; Enable magnification bias for both sources and lenses
use_magnification = T             ; Enable magnification bias effects
magnification_alpha = 2.5        ; Typical value for optical surveys

; ===== EMULATOR CONFIGURATION =====
; Use BaccoemuNonlinear for matter power spectrum (matches your example)
use_emulator_pk = T               ; Enable power spectrum emulator
emulator_pk_type = "baccoemu"     ; BaccoemuNonlinear emulator
transfer_function = "boltzmann_camb"  ; Still use CAMB for transfer function
matter_power_spectrum = "emulator"   ; Will be overridden by emulator

; ===== PERTURBATIVE TRACERS =====
; Use BaccoLbiasCalculator for advanced bias modeling (matches your example)
use_perturbative_bias = T         ; Enable perturbative bias
perturbative_bias_type = "bacco_lbias"  ; BaccoLbiasCalculator
log10k_min_pt = -4.0             ; Minimum k for perturbative calculations
log10k_max_pt = 2.0              ; Maximum k for perturbative calculations  
nk_per_decade_pt = 20            ; k sampling (matches your example)

; ===== ADVANCED COSMOLOGY PARAMETERS =====
; Use sigma8_cb normalization (matches your example)
use_sigma8_cb = T                ; Use cold+baryon sigma8 normalization
T_ncdm = 0.0                     ; Neutrino temperature (matches your example)

; ===== ELL CONFIGURATION =====
ell_min_logspaced = 10.0         ; Minimum ell
ell_max_logspaced = 10000.0      ; Maximum ell
n_ell_logspaced = 100            ; Number of ell points

; ===== REDSHIFT AND K RANGES =====
z_min = 0.0                      ; Minimum redshift
z_max = 3.0                      ; Maximum redshift
n_z = 150                        ; Number of redshift points
k_min = 1.0e-4                   ; Minimum k (h/Mpc)
k_max = 10.0                     ; Maximum k (h/Mpc)
n_k = 200                        ; Number of k points

; ===== ACCURACY PARAMETERS =====
limber_integration = T           ; Use Limber approximation for speed
non_limber_max_ell = 100        ; Max ell for exact integration

; ===== NOTES =====
; This configuration replicates the advanced CCL usage you showed:
;
; Python equivalent:
; bemu_nl = ccl.BaccoemuNonlinear()
; cosmo_nl = ccl.Cosmology(
;     Omega_c=params['Omega_c'], 
;     Omega_b=params['Omega_b'], 
;     h=params['h'], 
;     n_s=params['ns'], 
;     sigma8=params['sigma8_cb'],  # -> use_sigma8_cb = T
;     m_nu=params['Mnu'], 
;     w0=params['w0'],
;     wa=params['wa'],
;     Omega_k = 0.,
;     T_ncdm=0,                    # -> T_ncdm = 0.0
;     transfer_function='boltzmann_camb',
;     matter_power_spectrum=bemu_nl  # -> use_emulator_pk = T, emulator_pk_type = "baccoemu"
; )
; heft = ccl.nl_pt.BaccoLbiasCalculator(  # -> use_perturbative_bias = T
;     cosmo=cosmo_nl, 
;     log10k_min=min_k,           # -> log10k_min_pt
;     log10k_max=max_k,           # -> log10k_max_pt
;     nk_per_decade=20            # -> nk_per_decade_pt
; )
; 
; Tracers with magnification bias:
; t_g_i = ccl.NumberCountsTracer(..., mag_bias=None)  # -> use_magnification controls this
; t_l_i = ccl.WeakLensingTracer(..., ia_bias=...)     # -> ia_bias handled automatically
;
; Required input data sections:
; - [cosmological_parameters]: Must include sigma_8_cb if use_sigma8_cb = T
; - [nz_source]: Source redshift distributions
; - [nz_lens]: Lens redshift distributions  
; - [bin_bias]: Galaxy bias values (or computed from perturbative calculator)
; - [intrinsic_alignment_parameters]: IA parameters (optional)
