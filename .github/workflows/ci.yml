# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  brew_test:
    name: Brew Test
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies with brew
        shell: bash -l {0}
        run: |
          brew update
          brew list

          find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete
          
          # homebrew seems to ignore the --overwrite flag here.
          brew install  python@3.10 python@3.11  -v gcc fftw cfitsio gsl openblas mpi4py open-mpi libomp numpy scipy || brew link --overwrite python@3.10
          brew --prefix
          # add python to the default path for subsequent stages
          # echo "/usr/local/opt/python/libexec/bin" >> $GITHUB_PATH

      - name: Install CosmoSIS with pip
        shell: bash -l {0}
        run: |

          GCCV=$(brew list gcc --versions | awk '{print $2}' | awk -F . '{print $1}')

          # link gfortran to gfortran-12 or equiv
          GFORTRAN_PATH=$(which gfortran-${GCCV})
          GFORTRAN_DIR=$(dirname "$GFORTRAN_PATH")
          ln -s ${GFORTRAN_PATH} ${GFORTRAN_DIR}/gfortran

          # might not be needed 
          export OMPI_FC=gfortran-${GCCV}

          echo "Whiches!"
          which pip
          which python
          which python3
          echo XXX COMPILING COSMOSIS

          # Compile cosmosis at last
          FC=gfortran-${GCCV} CC=gcc-${GCCV} CXX=g++-${GCCV} MPIFC=mpif90 pip3 install -v --no-cache-dir --no-binary=cosmosis git+https://github.com/joezuntz/cosmosis@brew-fixes
          echo XXX SHOWING
          pip3 show cosmosis
          pip3 list
          pip3 --version
          echo XXX LS 
          ls /usr/local/opt/python/libexec/bin

          # dependencies
          pip3 install -r requirements.txt

      - name: Build standard library
        shell: bash -l {0}
        run: |
          export PATH=$PATH:/usr/local/opt/python/libexec/bin
          python3 --version
          which -a python3
          source cosmosis-configure --brew-gcc
          make

      - name: Cache WMAP data
        id: cache-wmap
        uses: actions/cache@v3
        env:
          cache-name: cache-wmap-data
        with:
          path: likelihood/wmap9/data/
          key: wmap-9-data

      - if: ${{ steps.cache-wmap.outputs.cache-hit != 'true' }}
        name: Download WMAP data
        run:  |
          ./examples/get-wmap-data.sh

      - name: Run Demos
        shell: bash -l {0}
        run: |
          source cosmosis-configure --brew-gcc
          .github/run-demos.sh



  conda_test:
    name: Conda Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        pyversion: ["3.7", "3.8", "3.9", "3.10"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: cosmosis-env
          channels: conda-forge
          python-version: ${{ matrix.pyversion }}

      - name: Install dependencies with conda
        shell: bash -l {0}
        run: conda install -c conda-forge cosmosis cosmosis-build-standard-library

      - name: Build standard library
        shell: bash -l {0}
        run: |
          source cosmosis-configure
          make

      - name: Cache WMAP data
        id: cache-wmap
        uses: actions/cache@v3
        env:
          cache-name: cache-wmap-data
        with:
          path: likelihood/wmap9/data/
          key: wmap-9-data

      - if: ${{ steps.cache-wmap.outputs.cache-hit != 'true' }}
        name: Download WMAP data
        run:  |
          ./examples/get-wmap-data.sh

      - name: Run Demos
        shell: bash -l {0}
        run: |
          source cosmosis-configure
          .github/run-demos.sh




  apt-get-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, "3.10"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install apt dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install gfortran-7 swig libopenmpi-dev openmpi-bin libopenblas-dev
        sudo ln -s `which gfortran-7` /usr/local/bin/gfortran
        sudo apt-get -y install libgsl-dev libfftw3-bin libfftw3-dev libfftw3-3 autotools-dev  autoconf libcfitsio-dev


    - uses: actions/cache@v2
      name: Load pip cache
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/setup.py') }}-v2

    - uses: actions/cache@v2
      name: Planck Data Cache
      id: cache-planck
      with:
        path: likelihood/planck2018/baseline
        key: ${{ runner.os }}-planck-2018

    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install cosmosis
        pip install --no-binary=mpi4py,camb mpi4py camb
        pip install fitsio astropy fast-pt Cython

    - name: Build
      run: |
        source .github/ci-setup.sh && make

    - name: Download Planck 2018 Data
      if: steps.cache-planck.outputs.cache-hit != 'true'
      run: |
          cd likelihood/planck2018
          curl "http://pla.esac.esa.int/pla/aio/product-action?COSMOLOGY.FILE_ID=COM_Likelihood_Data-baseline_R3.00.tar.gz" -o COM_Likelihood_Data-baseline_R3.00.tar.gz
          tar -zxvf COM_Likelihood_Data-baseline_R3.00.tar.gz

    # I have seen some failures here
    - name: Check camb installation
      run: |
        source .github/ci-setup.sh
        python -c "import camb"


    - name: Demo 2 Planck 2018 Likelihood
      run: |
        source .github/ci-setup.sh
        cosmosis demos/demo2.ini
        cosmosis-postprocess demos/demo2.ini -o output/demo2
        test -f output/demo2/comoving_distance.png
        python .github/ci-checks.py


    - name: Demo 9 Low-Resolution Multinest
      run: |
        source .github/ci-setup.sh
        cosmosis demos/demo9.ini -p multinest.live_points=100
        cosmosis-postprocess output/demo9.txt -o output/demo9
        test -f output/demo9/2D_supernova_params--deltam_cosmological_parameters--omega_m.png
